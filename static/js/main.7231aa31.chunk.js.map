{"version":3,"sources":["components/Clock.tsx","container/Clock.tsx","components/Definer.tsx","container/Definer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["clockStyle","css","Clock","clockElements","millisecTime","zeroPadding","num","time","sec","Math","floor","min","hour","minute","second","convertClock","baseHour","useState","setTime","useEffect","targetDateTime","Date","getTime","setHours","intervalID","setInterval","preTime","clearInterval","baseHourStyle","Definer","setHour","type","inputMode","defaultValue","onChange","e","Number","target","value","setBaseHour","mainStyle","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAIMA,EAAaC,YAAH,gDA+BHC,EAAmB,SAAC,GAA2B,IACpDC,EAlBa,SAACC,GACpB,IAAMC,EAAc,SAACC,GACnB,OAAOA,EAAM,GAAN,WAAeA,GAAf,UAA0BA,IAG7BC,EAAOH,EAAe,IACtBI,EAAMC,KAAKC,MAAMH,GAAQ,GACzBI,EAAMF,KAAKC,MAAMH,EAAO,IAAM,GAGpC,MAAO,CACLK,KAAMP,EAHKI,KAAKC,MAAMH,EAAO,GAAK,KAIlCM,OAAQR,EAAYM,GACpBG,OAAQT,EAAYG,IAKAO,CADmC,EAAxBR,MAGjC,OACE,mBAAKN,IAAKD,EAAV,UACGG,EAAcS,KADjB,IACwBT,EAAcU,OADtC,IAC+CV,EAAcW,W,OChCpDZ,EAAmB,SAAC,GAA+B,IAA7Bc,EAA4B,EAA5BA,SAA4B,EASrCC,mBAAS,GAT4B,mBAStDV,EATsD,KAShDW,EATgD,KAsB7D,OAXAC,qBAAU,WAVM,IAACP,EAAcQ,EAW7BF,GAXeN,EAWCI,IAXaI,EAWH,IAAIC,MATbC,UAAYF,EAAeG,SAAS,EAAG,EAAG,EAAG,IACzBX,EAAQ,KAS7C,IAAMY,EAAaC,aAAY,WAC7BP,GAAQ,SAACQ,GAAD,OAAaA,EAAU,SAC7B,KAAaV,GAEjB,OAAO,WACLW,cAAcH,MAEf,CAACR,IAEG,cAAC,EAAD,CAAWT,KAAMA,KC1BpBqB,EAAgB3B,YAAH,8XA0BN4B,EAAqB,SAAC,GAAwC,IAAtCb,EAAqC,EAArCA,SAAUc,EAA2B,EAA3BA,QAC7C,OACE,mBAAK7B,IAAK2B,EAAV,mBAEE,qBACEG,KAAK,OACLC,UAAU,UACVC,aAAcjB,EACdkB,SAAU,SAACC,GAAD,OAAOL,EAAQM,OAAOD,EAAEE,OAAOC,QAAU,MANvD,YCvBST,EAAqB,SAAC,GAA4C,IAA1Cb,EAAyC,EAAzCA,SAAUuB,EAA+B,EAA/BA,YAS7C,OAAO,cAAC,EAAD,CAAWvB,SAAUA,EAAUc,QARtB,SAAClB,GACXA,EAAO,GAIX2B,EAAY3B,OCRV4B,EAAYvC,YAAH,yLAuBAwC,EAbC,WAAoB,IAAD,EACDxB,mBAAS,IADR,mBAC1BD,EAD0B,KAChBuB,EADgB,KAGjC,OACE,mBAAKG,UAAU,MAAMzC,IAAKuC,EAA1B,SACE,6BACE,YAAC,EAAD,CAASxB,SAAUA,EAAUuB,YAAaA,IAC1C,YAAC,EAAD,CAAOvB,SAAUA,UCVV2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7231aa31.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\nimport React, { FC } from 'react';\nimport { css } from '@emotion/react';\n\nconst clockStyle = css`\n  font-size: 5rem;\n`;\n\ninterface Props {\n  time: number;\n}\n\ninterface ClockElements {\n  hour: string;\n  minute: string;\n  second: string;\n}\n\nconst convertClock = (millisecTime: number): ClockElements => {\n  const zeroPadding = (num: number): string => {\n    return num < 10 ? `0${num}` : `${num}`;\n  };\n\n  const time = millisecTime / 1000;\n  const sec = Math.floor(time) % 60;\n  const min = Math.floor(time / 60) % 60;\n  const hour = Math.floor(time / 60 / 60);\n\n  return {\n    hour: zeroPadding(hour),\n    minute: zeroPadding(min),\n    second: zeroPadding(sec),\n  };\n};\n\nexport const Clock: FC<Props> = ({ time }): JSX.Element => {\n  const clockElements = convertClock(time);\n\n  return (\n    <div css={clockStyle}>\n      {clockElements.hour}:{clockElements.minute}:{clockElements.second}\n    </div>\n  );\n};\n","import React, { FC, useEffect, useState } from 'react';\n\nimport { Clock as Presenter } from 'components/Clock';\n\ninterface Props {\n  baseHour: number;\n}\n\nexport const Clock: FC<Props> = ({ baseHour }): JSX.Element => {\n  const getTime = (hour: number, targetDateTime: Date): number => {\n    const targetTime =\n      targetDateTime.getTime() - targetDateTime.setHours(0, 0, 0, 0);\n    const multipliedTime = (targetTime * hour) / 24;\n\n    return multipliedTime;\n  };\n\n  const [time, setTime] = useState(0);\n\n  useEffect(() => {\n    setTime(getTime(baseHour, new Date()));\n    const intervalID = setInterval(() => {\n      setTime((preTime) => preTime + 1000);\n    }, (1000 * 24) / baseHour);\n\n    return () => {\n      clearInterval(intervalID);\n    };\n  }, [baseHour]);\n\n  return <Presenter time={time} />;\n};\n","/** @jsxImportSource @emotion/react */\nimport React, { FC } from 'react';\nimport { css } from '@emotion/react';\n\nconst baseHourStyle = css`\n  font-size: 2rem;\n\n  input {\n    background-color: #424242;\n    border: none;\n    border-bottom: 2px solid #888;\n    box-sizing: border-box;\n    color: #fff;\n    font-size: 100%;\n    outline: none;\n    text-align: right;\n    width: 4rem;\n\n    :focus {\n      background-color: #383838;\n      border-bottom: 2px solid #2196f3;\n    }\n  }\n`;\n\ninterface Props {\n  baseHour: number;\n  setHour: (baseHour: number) => void;\n}\n\nexport const Definer: FC<Props> = ({ baseHour, setHour }): JSX.Element => {\n  return (\n    <div css={baseHourStyle}>\n      1day =\n      <input\n        type=\"text\"\n        inputMode=\"numeric\"\n        defaultValue={baseHour}\n        onChange={(e) => setHour(Number(e.target.value) || 0)}\n      />\n      hours\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { Definer as Presenter } from 'components/Definer';\n\ninterface Props {\n  baseHour: number;\n  setBaseHour: (hour: number) => void;\n}\n\nexport const Definer: FC<Props> = ({ baseHour, setBaseHour }): JSX.Element => {\n  const setHour = (hour: number): void => {\n    if (hour < 1) {\n      return;\n    }\n\n    setBaseHour(hour);\n  };\n\n  return <Presenter baseHour={baseHour} setHour={setHour} />;\n};\n","/** @jsxImportSource @emotion/react */\nimport React, { FC, useState } from 'react';\nimport { css } from '@emotion/react';\n\nimport { Clock } from 'container/Clock';\nimport { Definer } from 'container/Definer';\n\nconst mainStyle = css`\n  align-items: center;\n  background-color: #303030;\n  color: #fff;\n  display: flex;\n  height: 100vh;\n  justify-content: center;\n  text-align: center;\n`;\n\nconst App: FC = (): JSX.Element => {\n  const [baseHour, setBaseHour] = useState(24);\n\n  return (\n    <div className=\"App\" css={mainStyle}>\n      <div>\n        <Definer baseHour={baseHour} setBaseHour={setBaseHour} />\n        <Clock baseHour={baseHour} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}